//github//YashwanthChennu

Problem Statement: https://www.hackerrank.com/challenges/s10-interquartile-range/problem


Solution:

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <malloc.h>

float quartile(int* array,int start,int end);
float quartile(int* array,int start,int end){
    int count = 0, i;
    
    for(i = start; i <= end; i++){
        
        count++;
    }
    if(count%2 != 0)
        return *(array + start + count/2);
    else
        return (*(array + start + count/2) + *(array + start + count/2 -1))/2;
        
}
int main() {

    int size, *numbers, *frequency, *array, i, array_size = 0, j, k = 0,temp;
    float q1, q3;
    scanf("%d", &size);
    numbers = (int*)malloc(size * sizeof(int));
    frequency = (int*)malloc(size * sizeof(int));

    for(i = 0; i < size; i++){
        scanf("%d", (numbers + i));
        
    }
    for(i = 0; i < size; i++){
        scanf("%d", (frequency+ i));
        array_size += *(frequency + i);

    }
    array = (int*)malloc(array_size * sizeof(int));
    for(i =0; i < size; i++){
        for(j = 0; j < *(frequency + i) ; j++, k++)
            *(array + k) = *(numbers + i);
        

    }
    for(i =0; i < array_size -1; i++)
        for(j =0; j < array_size- 1; j++)
            if(*(array + j) > *(array + j +1)){
                    temp = *(array +j);
                    *(array + j) = *(array + j +1);
                    *(array + j +1) = temp;
            }
    q1 = quartile(array, 0, (array_size/2) - 1);
    if(array_size % 2 == 0){
        
        q3 = quartile(array, array_size/2, array_size-1);

    }else{
        q3 = quartile(array, array_size/2 + 1, array_size -1  );

    }
    
        printf("%.1f", q3- q1);
    
    
    return 0;
}
